import groovy.json.JsonOutput

buildscript {
  ext {
    springBootVersion = '1.5.2.RELEASE'
    org = 'sunbird'
    hubuser = 'purplesunbird'
  }
  repositories {
    mavenCentral()
    // mavenLocal()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8")
  }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'

project.version = '0.0.1-SNAPSHOT'

jar {
  baseName = 'adminutil'
  version = project.version
}

sourceCompatibility = 1.8

repositories {
  mavenCentral()
  // mavenLocal()
}

configurations {
  compile.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
  compile('org.springframework.boot:spring-boot-starter')
  compile("org.springframework.boot:spring-boot-starter-web")
  compile('org.apache.tomcat.embed:tomcat-embed-jasper:8.0.47')
  compile("com.google.code.gson:gson:2.8.6")
  compile("com.squareup.okhttp3:okhttp:3.6.0")
  compile("org.hibernate:hibernate-validator")
  compile("org.springframework.boot:spring-boot-starter-actuator")
  compile ('com.ryantenney.metrics:metrics-spring:3.1.3') {
    exclude group: 'com.codahale.metrics'
    exclude group: 'org.springframework'
  }
  compile("io.dropwizard.metrics:metrics-core")
  compile("io.dropwizard.metrics:metrics-annotation")
  compile("org.apache.commons:commons-collections4:4.4")

  testCompile('io.rest-assured:rest-assured:3.0.6')
  testCompile('org.springframework.boot:spring-boot-starter-test')
  testCompile('com.github.tomakehurst:wiremock:2.5.1')
}

task('printVersion') << {
  def json = JsonOutput.toJson([
    name: project.name,
    version: project.version,
    org: project.ext.org,
    hubuser: project.ext.hubuser
  ])
  println json
}

task showMeCache << {
  configurations.compile.each { println it }
}